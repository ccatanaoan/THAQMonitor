AppType=JavaFX
Build1=Default,b4j.example
File1=1.bjl
File2=crysta.ttf
FileGroup1=Default Group
FileGroup2=Default Group
Group=Default Group
Library1=jcore
Library2=jfx
Library3=jrandomaccessfile
Library4=jmqtt
Library5=jcontrolsfx
Library6=jxui
Library7=javaobject
Module1=Gauge
NumberOfFiles=2
NumberOfLibraries=7
NumberOfModules=1
Version=6.01
@EndOfDesignText@
#Region  Project Attributes 
	#MainFormWidth: 350
	#MainFormHeight: 675 
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private Canvas1 As Canvas
	Private mqtt As MqttClient
	Type CircleData (x As Double, y As Double, clr As Int)
	Private StatusBar1 As StatusBar
	Private MenuBar1 As MenuBar
	Private user As String = "vynckfaq"
	Private password As String = "KHSV1Q1qSUUY"
	Private gaugeHomeTemp As Gauge
	Private xui As XUI
	Private GaugeAirQuality As Gauge
	Private serializator As B4XSerializator
	Private gaugeHomeHumidity As Gauge
	Private GaugeBasementAirQuality As Gauge
	Private gaugeBasementHumidity As Gauge
	Private gaugeBasementTemp As Gauge
	Private labelgaugeHomeTemp As Label
	Private labelGaugeAirQuality As Label
	Private labelgaugeHomeHumidity As Label
	Private labelgaugeBasementTemp As Label
	Private labelGaugeBasementAirQuality As Label
	Private labelgaugeBasementHumidity As Label
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.SetFormStyle("UTILITY") 'UNIFIED
	MainForm.RootPane.LoadLayout("1") 'Load the layout file.
	MainForm.Title = "THAQ Monitor"
	MainForm.Resizable = False
	MainForm.Show
	StatusBar1.Initialize("StatusBar1")
	StatusBar1.Text = "*** Connecting to Cloud MQTT ***"
	Dim clientId As String = Rnd(0, 999999999) & DateTime.Now 'create a unique id
	mqtt.Initialize("mqtt", "tcp://m14.cloudmqtt.com:11816", clientId)
	Dim mo As MqttConnectOptions
	mo.Initialize(user, password)
	mqtt.Connect2(mo)
	
	MainForm.RootPane.AddNode(StatusBar1, 0, 0, -1, 30)
	MainForm.RootPane.SetAnchors(StatusBar1, 0, -1, 0, 0)
	
	gaugeHomeTemp.SetRanges(Array(gaugeHomeTemp.CreateRange(0, 75, xui.Color_Green), _
    gaugeHomeTemp.CreateRange(75, 90, xui.Color_Yellow), _
    gaugeHomeTemp.CreateRange(90, 100, xui.Color_Red)))
	gaugeHomeTemp.CurrentValue=0
	
	gaugeHomeHumidity.SetRanges(Array(gaugeHomeHumidity.CreateRange(0, 70, xui.Color_Green), _
	gaugeHomeHumidity.CreateRange(70, 80, xui.Color_Yellow), _
	gaugeHomeHumidity.CreateRange(80, 100, xui.Color_Red)))
	gaugeHomeHumidity.CurrentValue=0
	
	GaugeAirQuality.SetRanges(Array(GaugeAirQuality.CreateRange(0, 100, xui.Color_Green), _
	GaugeAirQuality.CreateRange(100, 400, xui.Color_RGB(100,240,23)), _
	GaugeAirQuality.CreateRange(400, 900, xui.Color_Yellow), _
	GaugeAirQuality.CreateRange(900, 1000, xui.Color_Red)))
	GaugeAirQuality.CurrentValue = 0
	
	gaugeBasementTemp.SetRanges(Array(gaugeBasementTemp.CreateRange(0, 75, xui.Color_Green), _
    gaugeBasementTemp.CreateRange(75, 90, xui.Color_Yellow), _
    gaugeBasementTemp.CreateRange(90, 100, xui.Color_Red)))
	gaugeBasementTemp.CurrentValue=0
	
	gaugeBasementHumidity.SetRanges(Array(gaugeBasementHumidity.CreateRange(0, 70, xui.Color_Green), _
	gaugeBasementHumidity.CreateRange(70, 80, xui.Color_Yellow), _
	gaugeBasementHumidity.CreateRange(80, 100, xui.Color_Red)))
	gaugeBasementHumidity.CurrentValue=0
	
	GaugeBasementAirQuality.SetRanges(Array(GaugeBasementAirQuality.CreateRange(0, 100, xui.Color_Green), _
	GaugeBasementAirQuality.CreateRange(100, 400, xui.Color_RGB(100,240,23)), _
	GaugeBasementAirQuality.CreateRange(400, 900, xui.Color_Yellow), _
	GaugeBasementAirQuality.CreateRange(900, 1000, xui.Color_Red)))
	GaugeBasementAirQuality.CurrentValue = 0
	
	AlwaysOnTop(MainForm,True)
	
	'RotateNode(labelgaugeHomeTemp,270.0)
	
	'MainForm.WindowWidth = CheckMonitor.MaxX - CheckMonitor.MinX 'fx.PrimaryScreen.MaxX - fx.PrimaryScreen.MinX
	MainForm.WindowLeft = CheckMonitor.MaxX	- MainForm.Width - 10dip 'fx.PrimaryScreen.MinX
	'MainForm.WindowHeight = CheckMonitor.MaxY - CheckMonitor.MinY 'fx.PrimaryScreen.MaxY - fx.PrimaryScreen.MinY
	MainForm.WindowTop = CheckMonitor.MaxY - MainForm.Height - 60dip 'fx.PrimaryScreen.MinY

End Sub

Sub RotateNode(n As Node, Degree As Double) 'ignore
	Dim jo As JavaObject = n
	jo.RunMethod("setRotate", Array(Degree))
End Sub

Sub MainForm_Closed
	mqtt.Close
End Sub

Sub mqtt_Connected (Success As Boolean)
	If Success = False Then 
		Log(LastException)	
		StatusBar1.Text = "Error connecting"
	Else
		StatusBar1.Text = "Connected to Cloud MQTT"
		MenuBar1.Enabled = True
		mqtt.Subscribe("TempHumid", 0)
		mqtt.Subscribe("MQ7", 0)
		mqtt.Subscribe("TempHumidBasement", 0)
		mqtt.Subscribe("MQ7Basement", 0)
		mqtt.Publish("MQ7", serializator.ConvertObjectToBytes("Read voltage"))
		mqtt.Publish("MQ7Basement", serializator.ConvertObjectToBytes("Read voltage"))
	End If
End Sub

Private Sub mqtt_Disconnected
	StatusBar1.Text = "Disconnected from Cloud MQTT"
	MenuBar1.Enabled = False
	Dim mo As MqttConnectOptions
	mo.Initialize(user, password)
	mqtt.Connect2(mo)
End Sub

Private Sub mqtt_MessageArrived (Topic As String, Payload() As Byte)
	If Topic = "TempHumid" Then
		Dim s As String = BytesToString(Payload, 0, Payload.Length, "utf8")
		Dim a() As String = Regex.Split("\|",s)
		If a.Length = 9 Then 
			gaugeHomeTemp.CurrentValue=a(1)
			gaugeHomeHumidity.CurrentValue=a(2)
			labelgaugeHomeTemp.Text = GetPerception(a(3))
			labelgaugeHomeHumidity.Text = GetComfort(a(4))
			If a(3) > 3 Then
				labelgaugeHomeTemp.TextColor = fx.Colors.Red
			Else
				labelgaugeHomeTemp.TextColor = fx.Colors.black
			End If
			If a(4) > 0 Then
				labelgaugeHomeHumidity.TextColor = fx.Colors.Red
			Else
				labelgaugeHomeHumidity.TextColor = fx.Colors.black
			End If
		End If
	else If Topic = "MQ7" Then
		Dim s As String = BytesToString(Payload, 0, Payload.Length, "utf8")
		Dim a() As String = Regex.Split("\|",s)
		If a.Length = 3 Then
			GaugeAirQuality.CurrentValue=a(0)
			labelGaugeAirQuality.Text = GetAirQuality(a(0))
			If a(0) > 400 Then
				labelGaugeAirQuality.TextColor = fx.Colors.Red
			Else
				labelGaugeAirQuality.TextColor = fx.Colors.black
			End If
		End If
	else If Topic = "TempHumidBasement" Then
		Dim s As String = BytesToString(Payload, 0, Payload.Length, "utf8")
		Dim a() As String = Regex.Split("\|",s)
		If a.Length = 9 Then
			gaugeBasementTemp.CurrentValue=a(1)
			gaugeBasementHumidity.CurrentValue=a(2)
			labelgaugeBasementTemp.Text = GetPerception(a(3))
			labelgaugeBasementHumidity.Text = GetComfort(a(4))
			If a(3) > 3 Then
				labelgaugeBasementTemp.TextColor = fx.Colors.Red
			Else
				labelgaugeBasementTemp.TextColor = fx.Colors.black
			End If
			If a(4) > 0 Then
				labelgaugeBasementHumidity.TextColor = fx.Colors.Red
			Else
				labelgaugeBasementHumidity.TextColor = fx.Colors.black
			End If
		End If
	else If Topic = "MQ7Basement" Then
		Dim s As String = BytesToString(Payload, 0, Payload.Length, "utf8")
		Dim a() As String = Regex.Split("\|",s)
		If a.Length = 3 Then
			GaugeBasementAirQuality.CurrentValue=a(0)
			labelGaugeBasementAirQuality.Text = GetAirQuality(a(0))
			If a(0) > 400 Then
				labelGaugeBasementAirQuality.TextColor = fx.Colors.Red
			Else
				labelGaugeBasementAirQuality.TextColor = fx.Colors.black
			End If
		End If
	End If
End Sub

Sub MenuBar1_Action
	Dim item As MenuItem = Sender
	Select item.Text
		Case "_Clear"
			'mqtt.Publish(mytopic, serializator.ConvertObjectToBytes("clear"))
		Case "_Close All"
			'mqtt.Publish(mytopic, serializator.ConvertObjectToBytes("close"))
	End Select
End Sub

Sub AlwaysOnTop(o As Form,boo As Boolean)
	getStage(o).RunMethod("setAlwaysOnTop",Array(boo))
End Sub

private Sub getStage(o As JavaObject) As JavaObject
	Return o.GetFieldJO("stage")
End Sub

Sub GetPerception(DHT11Perception As String) As String
	' Return value       Dew point                        Human perception[6]
	'    7         Over 26 °C (>78.8°F)     Severely high, even deadly For asthma related illnesses
	'    6         24–26 °C (75.2-78.8°F)   Extremely uncomfortable, oppressive
	'    5         21–24 °C (69.8-75.2°F)   Very humid, quite uncomfortable
	'    4         18–21 °C (64.4-69.8°F)   Somewhat uncomfortable For most people at upper limit
	'    3         16–18 °C (60.8-64.4°F)   OK For most, but everyone perceives the humidity at upper limit
	'    2         13–16 °C (55.4-60.8°F)   Comfortable
	'    1         10–12 °C (50-53.6°F)     Very comfortable
	'    0         Under 10 °C (<50°F)      Feels like the western US, a Bit dry To some
	
	Dim localperception As String
	Select Case DHT11Perception
		Case 0
			localperception = "Feels like the western US, a bit dry to some"
		Case 1
			localperception = "Very comfortable"
		Case 2
			localperception = "Comfortable"
		Case 3
			localperception = "OK but humidity is at upper limit"
		Case 4
			localperception = "Uncomfortable and the humidity is at upper limit"
		Case 5
			localperception = "Very humid, quite uncomfortable"
		Case 6
			localperception = "Extremely uncomfortable, oppressive"
		Case 7
			localperception = "Severely high, even deadly for asthma related illnesses"
	End Select
	Return localperception
End Sub

Sub GetComfort(DHT11ComfortStatus As String) As String
	Dim localcomfortstatus As String
	Select Case DHT11ComfortStatus
		Case 0
			localcomfortstatus = "OK"
		Case 1
			localcomfortstatus = "Too hot"
		Case 2
			localcomfortstatus = "Too cold"
		Case 4
			localcomfortstatus = "Too dry"
		Case 5
			localcomfortstatus = "Hot and dry"
		Case 6
			localcomfortstatus = "Cold and dry"
		Case 8
			localcomfortstatus = "Too humid"
		Case 9
			localcomfortstatus = "Hot and humid"
		Case 10
			localcomfortstatus = "Cold and humid"
		Case Else
			localcomfortstatus = "Unknown"
	End Select
	Return localcomfortstatus
End Sub

Sub GetAirQuality(number As Int) As String
	' Detecting range: 10ppm-1000ppm carbon monoxide
	' Air quality-cases: < 100 perfect | 100 - 400 normal | > 400 - 900 high | > 900 abnormal
	If number <= 100 Then
		Return("Carbon monoxide perfect")
	else if ((number > 100) And (number < 400)) Or number = 400 Then
		Return("Carbon monoxide normal")
	else if ((number > 400) And (number < 900)) Or number = 900 Then
		Return("Carbon monoxide high")
	else If number > 900 Then
		Return("ALARM Carbon monoxide very high")
	Else
		Return("MQ-7 - cant read any value - check the sensor!")
	End If
End Sub

Sub CheckMonitor() As Screen
	Try
		If fx.Screens.Size= 1 Then
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(0)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		Else If fx.Screens.Size> 1 Then
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(1)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		Else
			Dim SList As List = fx.Screens
			Dim S As Screen = SList.Get(0)
			'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
			Return S
		End If
	Catch
		Dim SList As List = fx.Screens
		Dim S As Screen = SList.Get(0)
		'Msgbox.Show("Minimum X: " & S.MinX,"Screen")
		Return S
	End Try
End Sub

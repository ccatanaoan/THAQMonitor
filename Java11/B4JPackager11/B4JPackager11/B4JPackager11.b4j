AppType=StandardJava
Build1=Default,b4j.example
File1=FindDosPath.exe
File2=icon.ico
File3=InstallerScript.iss
File4=release_java_modules.txt
FileGroup1=New Group
FileGroup2=New Group
FileGroup3=New Group
FileGroup4=New Group
Group=Default Group
Library1=jcore
Library2=jshell
Library3=javaobject
Library4=json
NumberOfFiles=4
NumberOfLibraries=4
NumberOfModules=0
Version=7
@EndOfDesignText@
'Non-UI application (console / server application)
#Region Project Attributes 
	#CommandLineArgs: 
	#MergeLibraries: True 
#End Region

Sub Process_Globals
	'change InputJar as needed:
	Private InputJar As String = "C:\Users\ccatanaoan\Desktop\IoT\THAQ Monitor\Accuweather\b4j source\Objects\webengine.jar"
	Private NetFrameworkCSC As String = "C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe" 'windows only
	Private IconFile As String = "C:\Users\ccatanaoan\Desktop\IoT\THAQ Monitor\Accuweather\b4j source\Files\accuweather.ico"
	Private ExcludedModules As List 
	'ExcludedModules = Array("javafx.web") 'comment this line if using WebView
	Private IncludedModules As List
	'non configurable variables:
	Private JavafxJmods As String
	Private java As String
	Private PackageName As String
	Private TempFolder As String
	Private Modules As List
	Private TargetModule As String = "b4j"
	Private JavaFXLibs As String
	Private Version As Float = 1.01
	Private Windows As Boolean
	Private Mac As Boolean 
	Private Linux As Boolean 'ignore
End Sub

Sub AppStart (Args() As String)
	Log($"B4JPackager11 Version ${NumberFormat2(Version, 0, 2, 2, False)}"$)
	If ExcludedModules.IsInitialized = False Then ExcludedModules.Initialize
	If IncludedModules.IsInitialized = False Then IncludedModules.Initialize
	If Args.Length > 0 Then
		ParseInput (Args(0))		
	End If
	Select DetectOS
		Case "windows"
			Windows = True
		Case "mac"
			Mac = True
		Case "linux"
			Linux = True
	End Select
	java = File.Combine(GetSystemProperty("java.home", ""), "bin")
	TempFolder = File.Combine(File.DirApp, "temp")
	If GetSystemProperty("java.version", "").StartsWith("11") = False Then
		Log("Java 11 is required (Tools - Configure Paths).")
		Return
	End If
	JavafxJmods = ReplaceSlashes(File.Combine(java, "..\javafx\javafx-jmods"))
	JavaFXLibs = ReplaceSlashes(File.Combine(java, "..\javafx\lib"))
	
	Start
	Tick
	StartMessageLoop
End Sub

Private Sub ParseInput (FileName As String)
	Dim p As JSONParser
	p.Initialize(File.ReadString("", FileName))
	Dim m As Map = p.NextObject
	InputJar = m.GetDefault("InputJar", InputJar)
	ExcludedModules = m.GetDefault("ExcludedModules", ExcludedModules)
	IncludedModules = m.GetDefault("IncludedModules", IncludedModules)
	IconFile = m.GetDefault("IconFile", IconFile)
End Sub



Private Sub ReplaceSlashes (s As String) As String
	If Windows Then Return s
	Return s.Replace("\", "/")
End Sub

Sub Tick
	Do While True
		Sleep(1000)
		Log(".")
	Loop
End Sub

Sub Start
	
	Wait For (PrepareFolders) Complete (Success As Boolean)
	Wait For (FindPackageName) Complete (Success As Boolean)
	Wait For (FindRequiredModules) Complete (Success As Boolean)
	Wait For (CreateModuleFile) Complete (Success As Boolean)
	Wait For (Jlink) Complete (Success As Boolean)
	Wait For (BuildRunner) Complete (Success As Boolean)
	Wait For (OpenExplorer) Complete (Success As Boolean)
	Log("Done!")
	StopMessageLoop
End Sub

Sub PrepareFolders As ResumableSub
	If InputJar = "" Then 
		Log("InputJar not set")
		ExitApplication2(-1)
	End If
	If File.Exists(TempFolder, "") Then
		DeleteFolderRecursive(TempFolder)
		File.Delete(TempFolder, "")
	End If
	If File.Exists(TempFolder, "") Then
		Log("Failed to delete temp folder")
		ExitApplication2(1)
	End If
	File.MakeDir(TempFolder, "")
	Log("InputJar: " & InputJar)
	File.Copy(InputJar, "", TempFolder, "jar.jar")
	If Windows Then
		File.Copy(File.DirAssets, "FindDosPath.exe", TempFolder, "FindDosPath.exe")
		Wait For (RunShell(True, File.Combine(TempFolder, "FindDosPath.exe"), Array(Q(JavafxJmods)))) Complete (Output As String)
		JavafxJmods = Output.Trim
		Dim s As String = File.ReadString(File.DirAssets, "InstallerScript.iss")
		s = s.Replace("$GUID$", GUID)
		File.WriteString(TempFolder, "InstallerScript-Template.iss", s)
	End If
	For Each f As String In Array(JavafxJmods, JavaFXLibs)
		If File.Exists(f, "") = False Then
			Log($"Folder not found: ${f}"$)
			ExitApplication2(-1)
		End If
	Next
	Return True
End Sub

Sub FindPackageName As ResumableSub
	Wait For (RunShell(False, "jar", Array("xf", "jar.jar", "META-INF"))) Complete (StdOut As String)
	Dim s As String = File.ReadString(TempFolder, "META-INF/MANIFEST.MF")
	Dim m As Matcher = Regex.Matcher2($"^JavaFX-Application-Class:\s+(.*)\.main$"$, Regex.MULTILINE, s)
	m.Find
	PackageName = m.Group(1)
	Log($"Package name: ${PackageName}"$)
	Return True
End Sub

Sub Q(s As String) As String
	If Windows Then
		Return QUOTE & s & QUOTE
	Else
		Return s
	End If
End Sub

Private Sub CheckResult (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	If Success = False Or ExitCode <> 0 Then
		Log(StdOut)
		Log(StdErr)
		ExitApplication2(1)
	End If
End Sub

Private Sub RunShell(AbsolutePath As Boolean, Executable As String, Args As List) As ResumableSub
	Dim shl As Shell
	If AbsolutePath = False Then Executable = File.Combine(java, Executable)
	shl.InitializeDoNotHandleQuotes("shl",Executable, Args)
	shl.WorkingDirectory = TempFolder
	Log($"Running: ${Executable}"$)
	shl.Run(-1)
	Wait For shl_ProcessCompleted (Success As Boolean, ExitCode As Int, StdOut As String, StdErr As String)
	CheckResult(Success, ExitCode, StdOut, StdErr)
	Return StdOut
End Sub

Private Sub FindRequiredModules As ResumableSub
	
	Wait For (RunShell(False, "jdeps", Array("--module-path", Q(JavaFXLibs), "-s", "jar.jar"))) Complete (Output As String)
	Dim set As Map
	set.Initialize
	For Each module As String In IncludedModules
		set.Put(module, "")
	Next
	For Each line As String In Regex.Split("[\r\n]+", Output)
		Dim m As Matcher = Regex.Matcher("->\s+([a-zA-Z0-9_\-\.]+)$", line)
		If m.Find Then
			Dim module As String = m.Group(1)
			If ExcludedModules.IndexOf(module) > -1 Then Continue
			set.Put(module, "")
		End If
	Next
	Modules.Initialize
	For Each module As String In set.Keys
		Modules.Add(module)
	Next
	Log($"Explicitly excluded modules: ${ExcludedModules}"$)
	Log($"Included modules: ${Modules}"$)
	Return True
End Sub

Private Sub CreateModuleFile As ResumableSub
	Dim sb As StringBuilder
	sb.Initialize
	sb.Append($"module ${TargetModule} {"$).Append(CRLF)
	For Each Module In Modules
		sb.Append("requires ").Append(Module).Append(";").Append(CRLF)
	Next
	sb.Append("exports ").Append(PackageName).Append(";").Append(CRLF)
	If File.Exists(TempFolder, ReplaceSlashes("META-INF\services")) Then
		For Each f As String In File.ListFiles(File.Combine(TempFolder, ReplaceSlashes("META-INF\services")))
			sb.Append("uses ").Append(f).Append(";").Append(CRLF)
		Next
	End If
	sb.Append("}")
	File.WriteString(TempFolder, "module-info.java", sb.ToString)
	Dim args As List = Array($"--patch-module"$, $"${TargetModule}=jar.jar"$, "-p", Q(JavaFXLibs), "module-info.java")
	Wait For (RunShell(False, "javac", args)) Complete (StdOut As String)
	Wait For (RunShell(False, "jar", Array("-uf", "jar.jar", "module-info.class"))) Complete (Output As String)
	Return True
End Sub



Sub Jlink As ResumableSub
	File.WriteString(TempFolder, "jlinkargs.txt", $"--add-modules ${ModulesToString}"$)
	
	
	Dim modulepath As String = $"${JavafxJmods};jar.jar"$
	If Windows = False Then modulepath = modulepath.Replace(";", ":")
	Wait For (RunShell(False, "jlink", Array("--compress=2", "--no-header-files", "--strip-debug", _
		"--module-path", modulepath , "--output", "build" ,"@jlinkargs.txt"))) Complete (Output As String)
	Dim r As String = File.ReadString(File.DirAssets, "release_java_modules.txt")
	r = r.Replace("ALL-UNNAMED", TargetModule)
	r = r & " --add-modules=" & ModulesToString
	File.WriteString(TempFolder, ReplaceSlashes("build\bin\release_java_modules.txt"), r)
	Return True
End Sub

Sub DeleteFolderRecursive(Folder As String)
	For Each f As String In File.ListFiles(Folder)
		If File.IsDirectory(Folder, f) Then
			DeleteFolderRecursive (File.Combine(Folder, f))
		End If
		File.Delete(Folder, f)
	Next
End Sub

Private Sub ModulesToString As String
	Dim sb As StringBuilder
	sb.Initialize
	sb.Append(TargetModule)
	For Each m As String In Modules
		sb.Append(",").Append(m)
	Next
	Return sb.ToString
End Sub

Private Sub BuildRunner As ResumableSub
	If Windows Then
		
		Dim FileName As String = "javaw.exe"
		Dim target As String = "winexe"
		Dim output As String = "run.exe"
		File.WriteString(TempFolder, "runner.cs", $"
	
using System;
using System.Diagnostics;
namespace B4JRunner
{
    class Program
    {
        static void Main(string[] args)
        {
            Process p = new Process();
            p.StartInfo.FileName = "${FileName}";
            p.StartInfo.WorkingDirectory = @"bin";
            p.StartInfo.Arguments = "@release_java_modules.txt -m ${TargetModule}/${PackageName}.main";
            p.Start();
        }
    }
}"$)
		If IconFile = "" Then
			File.Copy(File.DirAssets, "icon.ico", TempFolder, "icon.ico")
		Else
			File.Copy(IconFile, "", TempFolder, "icon.ico")
		End If
		Wait For (RunShell(True, NetFrameworkCSC , Array($"/target:${target}"$, "/win32icon:icon.ico", $"/out:build\${output}"$, "runner.cs"))) complete (output As String)
		File.WriteString(TempFolder, "build\run_debug.bat", $"
	cd bin
java.exe @release_java_modules.txt -m ${TargetModule}/${PackageName}.main
pause
"$)
	Else
		File.WriteString(TempFolder, "build/run.command", $"#!/bin/bash
cd -- "${"$"}(dirname -- "${"$"}BASH_SOURCE")"
cd bin
./java @release_java_modules.txt -m ${TargetModule}/${PackageName}.main
exit 0
 "$)
		Dim jo As JavaObject
		jo.InitializeNewInstance("java.io.File", Array As String(File.Combine(TempFolder, "build/run.command")))
		jo.RunMethod("setExecutable", Array As Object(True, False))
	End If
	Return True
End Sub

Sub GUID As String
	Dim sb As StringBuilder
	sb.Initialize
	For Each stp As Int In Array(8, 4, 4, 4, 12)
		If sb.Length > 0 Then sb.Append("-")
		For n = 1 To stp
			sb.Append(Bit.ToHexString(Rnd(0, 16)).ToUpperCase)
		Next
	Next
	Return sb.ToString
End Sub

Sub OpenExplorer As ResumableSub
	If Windows Then
		Wait For (RunShell(True, "explorer.exe", Array("/select", ",", Q(File.Combine(TempFolder, "build\run.exe"))))) Complete (Output As String)
	Else If Mac Then
		Wait For (RunShell(True, "open", Array(File.Combine(TempFolder, "build")))) Complete (Output As String)
	Else
		Log($"Build folder: ${File.Combine(TempFolder, "build")}"$)
	End If
	Return True
End Sub

Sub DetectOS As String
	Dim os As String = GetSystemProperty("os.name", "").ToLowerCase
	If os.Contains("win") Then
  		Return "windows"
	Else If os.Contains("mac") Then
		Return "mac"
	Else
		Return "linux"
	End If
End Sub

